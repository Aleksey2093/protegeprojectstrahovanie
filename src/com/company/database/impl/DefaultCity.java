package com.company.database.impl;

import edu.stanford.smi.protege.code.generator.wrapping.AbstractWrappedInstance;
import edu.stanford.smi.protege.model.*;
import com.company.database.City;
import com.company.database.*;

/**
 * Generated by Protege (http://protege.stanford.edu).
 * Source Class: City
 *
 * @version generated on Mon Apr 18 14:26:55 MSD 2016
 */
public class DefaultCity extends AbstractWrappedInstance
         implements City {

    public DefaultCity(Instance instance) {
        super(instance);
    }


    public DefaultCity() {
    }

    // Slot Koeef

    public float getKoeef() {
        java.lang.Float value = (java.lang.Float) getWrappedProtegeInstance().getOwnSlotValue(getKoeefSlot());
        return value == null ? null :
            (java.lang.Float) value.floatValue();
    }


    public Slot getKoeefSlot() {
        final String name = "Koeef";
        return getKnowledgeBase().getSlot(name);
    }


    public boolean hasKoeef() {
        return hasSlotValues(getKoeefSlot());
    }


    public void setKoeef(float newKoeef) {
        setSlotValue(getKoeefSlot(), new java.lang.Float(newKoeef));
    }

    // Slot cityName

    public String getCityName() {
        return (String) getWrappedProtegeInstance().getOwnSlotValue(getCityNameSlot());
    }


    public Slot getCityNameSlot() {
        final String name = "cityName";
        return getKnowledgeBase().getSlot(name);
    }


    public boolean hasCityName() {
        return hasSlotValues(getCityNameSlot());
    }


    public void setCityName(String newCityName) {
        setSlotValue(getCityNameSlot(), newCityName);
    }
}
